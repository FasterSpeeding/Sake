{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sake # A distributed asynchronous cache interface (plus several implementations) designed for use with Hikari. Installation # You can install Sake from PyPI using the following command. python -m pip install hikari-sake -U The hikari-sake[tanjun] feature flag can be used to ensure that the installed Tanjun version is compatible with Sake's Tanjun adapters. You should still have a Tanjun version pinned in your own requirements as this just provides an acceptable range for the requirement. Support # Hikari's support guild provides for support for Sake. Quick Usage. # For usage see the the documentation and examples .","title":"Home"},{"location":"#sake","text":"A distributed asynchronous cache interface (plus several implementations) designed for use with Hikari.","title":"Sake"},{"location":"#installation","text":"You can install Sake from PyPI using the following command. python -m pip install hikari-sake -U The hikari-sake[tanjun] feature flag can be used to ensure that the installed Tanjun version is compatible with Sake's Tanjun adapters. You should still have a Tanjun version pinned in your own requirements as this just provides an acceptable range for the requirement.","title":"Installation"},{"location":"#support","text":"Hikari's support guild provides for support for Sake.","title":"Support"},{"location":"#quick-usage","text":"For usage see the the documentation and examples .","title":"Quick Usage."},{"location":"changelog/","text":"Changelog # All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased # 1.0.5a1 # Added # \"tanjun\" feature flag for ensuring this is installed with a Tanjun version that's compatible with the Tanjun adapters. Changed # Dropped support for Python 3.8. 1.0.4a1.post1 - 2022-11-10 # Changed # Switched from aioredis to redis-py for connecting to Redis to properly support Python 3.11. 1.0.4a1 - 2022-11-10 # Changed # Bumped the minimum hikari version to 2.0.0.dev112. Avoid fetching the bot's user to get it's ID if a READY event has already been received. The Tanjun adapter get and iter methods no-longer raise TypeError when the inner-client is inactive. Fixed # Async locking when fetching the bot's ID internally and ensure it only fetches once. Raise sake.errors.ClosedClient instead of TypeError when the Sake Client is inactive (from get and iter methods). Removed # The project metadata dunder attributes from sake . importlib.metadata should be used to get this metadata instead. sake.redis_iterators is now internal/hidden. redis.ResourceClient.get_connection is now internal/hidden. 1.0.3a1.post1 - 2022-08-30 # Changed # Bumped the minimum hikari version to 2.0.0.dev110. 1.0.3a1 - 2022-08-27 # Fixed # Fixed compatibility with newer Hikari and Tanjun releases. 1.0.2a1 - 2022-01-13 # Fixed # The Redis clear_voice_states_for_guild method mishandling passing coroutines to asyncio.gather leading to errors being raised. Removed # The Prefix and Integration cache implementations and interfaces as a part of pruning out-of-scope and useless cache stores. 1.0.1a1 - 2022-01-06 # Added # RedisResource.add_to_tanjun method for easier integration with Tanjun. This both registers dependencies for the resource abcs and impls but also registers adapters which make Sake compatible with Tanjun's AsyncCache interfaces for the relevant resources. Changed # abc.ABC is now used as the base class for the abstract interfaces in sake.abc instead of typing.Protocol . abc.CacheIterator.len is now guaranteed to always returns int . 1.0.0a1 - 2021-12-25 # Added # Python 3.10 compatibility thx to Aioredis 2.0.0. Efficiency improvements brought in by the switch to listening to raw event dispatch. ClosedClient error which is raised in favour of RuntimeError when an operation is attempted on an inactive sake client. Client is_alive attribute (both on the abstract interface and redit impl). Changed # Aioredis dependency minimum version to 2.0.0 This comes with breaking changes to how RedisClient is initialised as parameters have been replaced and changed (semantically speaking). For more information on this see the documentation. And the client returned by RedisClient.get_connection is now fundamentally different. Bumped Hikari dependency minimum version to 2.0.0.dev104. The structure and semantics of internal aspects of RedisClient like how it manages the database connections and how it loads listeners have changed. Renamed sake.traits to sake.abc . Renamed RedisClient.rest to app and .dispatch to .event_manager . IDs are now always stored as strings. Renamed rest to app in RedisClient.__init__ and moved away from inferring the event manager from this argument (it now must always be passed as event_manager if you want the client to listen to events to fill itself). event_managed argument to RedisClient.__init__ to let the client be started based on the linked event manager. Removed # sake.marshalling and any relevant properties and arguments. The utility functions in sake.redis_iterators are now private. The \"set\" methods have been removed from the abstract interfaces in sake.abc as these are now considered implementation detail. While this wasn't ever officially supported, passing hikari.Unique objects in place of IDs to RedisClients will now lead to erroneous behaviour due to an internal refactor in how IDs are handled. window_size parameter from RedisClient.clear_* methods as these are no-longer chunked.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#105a1","text":"","title":"1.0.5a1"},{"location":"changelog/#added","text":"\"tanjun\" feature flag for ensuring this is installed with a Tanjun version that's compatible with the Tanjun adapters.","title":"Added"},{"location":"changelog/#changed","text":"Dropped support for Python 3.8.","title":"Changed"},{"location":"changelog/#104a1post1-2022-11-10","text":"","title":"1.0.4a1.post1 - 2022-11-10"},{"location":"changelog/#changed_1","text":"Switched from aioredis to redis-py for connecting to Redis to properly support Python 3.11.","title":"Changed"},{"location":"changelog/#104a1-2022-11-10","text":"","title":"1.0.4a1 - 2022-11-10"},{"location":"changelog/#changed_2","text":"Bumped the minimum hikari version to 2.0.0.dev112. Avoid fetching the bot's user to get it's ID if a READY event has already been received. The Tanjun adapter get and iter methods no-longer raise TypeError when the inner-client is inactive.","title":"Changed"},{"location":"changelog/#fixed","text":"Async locking when fetching the bot's ID internally and ensure it only fetches once. Raise sake.errors.ClosedClient instead of TypeError when the Sake Client is inactive (from get and iter methods).","title":"Fixed"},{"location":"changelog/#removed","text":"The project metadata dunder attributes from sake . importlib.metadata should be used to get this metadata instead. sake.redis_iterators is now internal/hidden. redis.ResourceClient.get_connection is now internal/hidden.","title":"Removed"},{"location":"changelog/#103a1post1-2022-08-30","text":"","title":"1.0.3a1.post1 - 2022-08-30"},{"location":"changelog/#changed_3","text":"Bumped the minimum hikari version to 2.0.0.dev110.","title":"Changed"},{"location":"changelog/#103a1-2022-08-27","text":"","title":"1.0.3a1 - 2022-08-27"},{"location":"changelog/#fixed_1","text":"Fixed compatibility with newer Hikari and Tanjun releases.","title":"Fixed"},{"location":"changelog/#102a1-2022-01-13","text":"","title":"1.0.2a1 - 2022-01-13"},{"location":"changelog/#fixed_2","text":"The Redis clear_voice_states_for_guild method mishandling passing coroutines to asyncio.gather leading to errors being raised.","title":"Fixed"},{"location":"changelog/#removed_1","text":"The Prefix and Integration cache implementations and interfaces as a part of pruning out-of-scope and useless cache stores.","title":"Removed"},{"location":"changelog/#101a1-2022-01-06","text":"","title":"1.0.1a1 - 2022-01-06"},{"location":"changelog/#added_1","text":"RedisResource.add_to_tanjun method for easier integration with Tanjun. This both registers dependencies for the resource abcs and impls but also registers adapters which make Sake compatible with Tanjun's AsyncCache interfaces for the relevant resources.","title":"Added"},{"location":"changelog/#changed_4","text":"abc.ABC is now used as the base class for the abstract interfaces in sake.abc instead of typing.Protocol . abc.CacheIterator.len is now guaranteed to always returns int .","title":"Changed"},{"location":"changelog/#100a1-2021-12-25","text":"","title":"1.0.0a1 - 2021-12-25"},{"location":"changelog/#added_2","text":"Python 3.10 compatibility thx to Aioredis 2.0.0. Efficiency improvements brought in by the switch to listening to raw event dispatch. ClosedClient error which is raised in favour of RuntimeError when an operation is attempted on an inactive sake client. Client is_alive attribute (both on the abstract interface and redit impl).","title":"Added"},{"location":"changelog/#changed_5","text":"Aioredis dependency minimum version to 2.0.0 This comes with breaking changes to how RedisClient is initialised as parameters have been replaced and changed (semantically speaking). For more information on this see the documentation. And the client returned by RedisClient.get_connection is now fundamentally different. Bumped Hikari dependency minimum version to 2.0.0.dev104. The structure and semantics of internal aspects of RedisClient like how it manages the database connections and how it loads listeners have changed. Renamed sake.traits to sake.abc . Renamed RedisClient.rest to app and .dispatch to .event_manager . IDs are now always stored as strings. Renamed rest to app in RedisClient.__init__ and moved away from inferring the event manager from this argument (it now must always be passed as event_manager if you want the client to listen to events to fill itself). event_managed argument to RedisClient.__init__ to let the client be started based on the linked event manager.","title":"Changed"},{"location":"changelog/#removed_2","text":"sake.marshalling and any relevant properties and arguments. The utility functions in sake.redis_iterators are now private. The \"set\" methods have been removed from the abstract interfaces in sake.abc as these are now considered implementation detail. While this wasn't ever officially supported, passing hikari.Unique objects in place of IDs to RedisClients will now lead to erroneous behaviour due to an internal refactor in how IDs are handled. window_size parameter from RedisClient.clear_* methods as these are no-longer chunked.","title":"Removed"},{"location":"usage/","text":"Usage # Coming soon.","title":"Usage"},{"location":"usage/#usage","text":"Coming soon.","title":"Usage"},{"location":"reference/","text":"sake # A distributed asynchronous cache standard designed for Hikari. For the interfaces defined by this standard see sake.abc . For standard implementation(s) see: Redis: sake.redis BackendError # Bases: SakeException , ValueError Error that's raised when communicating with the backend fails. This may be a sign of underlying network or database issues. CannotDelete # Bases: SakeException , ValueError Error that's raised in response to an attempt to delete an entry which can't be deleted. This most likely reason for this to be raised would be due to an attempt to deleted a entry that's being kept alive by references without specifying to cascade references in a referential database. ClosedClient # Bases: SakeException Error that's raised when an attempt to use an inactive client is made. EntryNotFound # Bases: SakeException , LookupError Error that's raised in response to an attempt to get an entry which doesn't exist. Note This shouldn't ever be raised by a delete method or iter method. InvalidDataFound # Bases: SakeException , LookupError Error that's raised when the retrieved data is in an unexpected format. This may indicate that you are running different versions of a Sake implementation with the same database. RedisCache # Bases: GuildCache , EmojiCache , GuildChannelCache , InviteCache , MemberCache , MessageCache , PresenceCache , RoleCache , UserCache , VoiceStateCache , sake_abc . Cache A Redis implementation of all the defined cache resources. SakeException # Bases: Exception Base exception for the expected exceptions raised by Sake implementations. base class-attribute # base : typing . Optional [ Exception ] The exception which caused this exception if applicable else None . __init__ # __init__ ( message , * , exception = None ) Initialise a sake exception instance. PARAMETER DESCRIPTION message The exception's message. TYPE: str exception The exception which caused this exception if applicable else None . TYPE: typing . Optional [ Exception ] DEFAULT: None","title":"sake"},{"location":"reference/#sake_1","text":"A distributed asynchronous cache standard designed for Hikari. For the interfaces defined by this standard see sake.abc . For standard implementation(s) see: Redis: sake.redis","title":"sake"},{"location":"reference/#sake.BackendError","text":"Bases: SakeException , ValueError Error that's raised when communicating with the backend fails. This may be a sign of underlying network or database issues.","title":"BackendError"},{"location":"reference/#sake.CannotDelete","text":"Bases: SakeException , ValueError Error that's raised in response to an attempt to delete an entry which can't be deleted. This most likely reason for this to be raised would be due to an attempt to deleted a entry that's being kept alive by references without specifying to cascade references in a referential database.","title":"CannotDelete"},{"location":"reference/#sake.ClosedClient","text":"Bases: SakeException Error that's raised when an attempt to use an inactive client is made.","title":"ClosedClient"},{"location":"reference/#sake.EntryNotFound","text":"Bases: SakeException , LookupError Error that's raised in response to an attempt to get an entry which doesn't exist. Note This shouldn't ever be raised by a delete method or iter method.","title":"EntryNotFound"},{"location":"reference/#sake.InvalidDataFound","text":"Bases: SakeException , LookupError Error that's raised when the retrieved data is in an unexpected format. This may indicate that you are running different versions of a Sake implementation with the same database.","title":"InvalidDataFound"},{"location":"reference/#sake.RedisCache","text":"Bases: GuildCache , EmojiCache , GuildChannelCache , InviteCache , MemberCache , MessageCache , PresenceCache , RoleCache , UserCache , VoiceStateCache , sake_abc . Cache A Redis implementation of all the defined cache resources.","title":"RedisCache"},{"location":"reference/#sake.SakeException","text":"Bases: Exception Base exception for the expected exceptions raised by Sake implementations.","title":"SakeException"},{"location":"reference/#sake.errors.SakeException.base","text":"base : typing . Optional [ Exception ] The exception which caused this exception if applicable else None .","title":"base"},{"location":"reference/#sake.errors.SakeException.__init__","text":"__init__ ( message , * , exception = None ) Initialise a sake exception instance. PARAMETER DESCRIPTION message The exception's message. TYPE: str exception The exception which caused this exception if applicable else None . TYPE: typing . Optional [ Exception ] DEFAULT: None","title":"__init__()"},{"location":"reference/abc/","text":"sake.abc # Protocols and abstract classes for the cache resources defined by this standard. Note Unlike the abstract classes defined here, there is no guarantee that the protocols defined here will be included in the MRO of the classes which implement them. Cache # Bases: GuildCache , EmojiCache , GuildChannelCache , InviteCache , MeCache , MemberCache , MessageCache , PresenceCache , RoleCache , UserCache , VoiceStateCache , abc . ABC Protocol of a cache which implements all the defined resources. CacheIterator # Bases: hikari . LazyIterator [ _T ] , abc . ABC A asynchronous iterator of entries within a defined cache store. len abstractmethod async # len () Get the count of entries that this iterator covers. Note Unlike hikari.iterators.LazyIterator.count , this will not exhaust the iterator and may return different values as entries are added and removed from the cache. RETURNS DESCRIPTION int The count of entries that this iterator covers as of the call. EmojiCache # Bases: Resource , abc . ABC The traits of a implementation which supports a emoji cache. clear_emojis abstractmethod async # clear_emojis () Empty the emoji cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_emoji abstractmethod async # delete_emoji ( emoji_id ) Remove an emoji from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION emoji_id The ID of the emoji to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_emoji abstractmethod async # get_emoji ( emoji_id ) Get an emoji from the cache. PARAMETER DESCRIPTION emoji_id The ID of the emoji to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . emojis . KnownCustomEmoji The object of the emoji fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_emojis abstractmethod # iter_emojis () Iterate over the emojis stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . emojis . KnownCustomEmoji ] An async iterator of the emojis stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. GuildCache # Bases: Resource , abc . ABC The traits of a implementation which supports a guild cache. clear_guilds abstractmethod async # clear_guilds () Empty the guild cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_guild abstractmethod async # delete_guild ( guild_id ) Remove a guild from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION guild_id The ID of the guild to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_guild abstractmethod async # get_guild ( guild_id ) Get a guild from the cache. PARAMETER DESCRIPTION guild_id The ID of the guild to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . guilds . GatewayGuild The object of the guild fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_guilds abstractmethod # iter_guilds () Iterate over the guilds stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . guilds . GatewayGuild ] An async iterator of the guilds stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. GuildChannelCache # Bases: Resource , abc . ABC The traits of a implementation which supports a guild channel cache. clear_guild_channels abstractmethod async # clear_guild_channels () Empty the guild channel cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_guild_channel abstractmethod async # delete_guild_channel ( channel_id ) Remove a guild guild channel from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION channel_id The ID of the guild channel to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_guild_channel abstractmethod async # get_guild_channel ( channel_id ) Get a guild channel from the cache. PARAMETER DESCRIPTION channel_id The ID of the guild channel to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . channels . PermissibleGuildChannel The object of the guild channel fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_guild_channels abstractmethod # iter_guild_channels () Iterate over the guild channels stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . channels . PermissibleGuildChannel ] An async iterator of the guild channels stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. InviteCache # Bases: Resource , abc . ABC The traits of a implementation which supports a invite cache. clear_invites abstractmethod async # clear_invites () Empty the invites cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_invite abstractmethod async # delete_invite ( invite_code ) Remove an invite channel from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION invite_code The code of the invite to remove from the cache. TYPE: str RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_invite abstractmethod async # get_invite ( invite_code ) Get an invite from the cache. PARAMETER DESCRIPTION invite_code The code of the invite to get from the cache. TYPE: str RETURNS DESCRIPTION hikari . invites . InviteWithMetadata The object of the invite fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_invites abstractmethod # iter_invites () Iterate over the invites stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . invites . InviteWithMetadata ] An async iterator of the invites stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. MeCache # Bases: Resource , abc . ABC The traits of a implementation which supports a own user cache. delete_me abstractmethod async # delete_me () Remove the cached own user entry. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_me abstractmethod async # get_me () Get the own user cache entry. RETURNS DESCRIPTION hikari . users . OwnUser The object of the own user fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. MemberCache # Bases: Resource , abc . ABC The traits of a implementation which supports a member cache. clear_members abstractmethod async # clear_members () Empty the members cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_member abstractmethod async # delete_member ( guild_id , user_id ) Remove a member from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION guild_id The ID of the guild to remove a cached member for. TYPE: hikari . Snowflakeish user_id The ID of the user to remove a cached member for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_member abstractmethod async # get_member ( guild_id , user_id ) Get a member from the cache. PARAMETER DESCRIPTION guild_id The ID of the guild to get a cached member for. TYPE: hikari . Snowflakeish user_id The ID of the user to get a cached member for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . guilds . Member The object of the member fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_members abstractmethod # iter_members () Iterate over the members stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Member ] An async iterator of the members stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. MessageCache # Bases: Resource , abc . ABC The traits of a implementation which supports a message cache. clear_messages abstractmethod async # clear_messages () Empty the messages cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_message abstractmethod async # delete_message ( message_id ) Remove a message from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION message_id The ID of the message to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_message abstractmethod async # get_message ( message_id ) Get a message from the cache. PARAMETER DESCRIPTION message_id The ID of the message to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . messages . Message The object of the message fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_messages abstractmethod # iter_messages () Iterate over the messages stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . messages . Message ] An async iterator of the messages stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. PresenceCache # Bases: Resource , abc . ABC The traits of a implementation which supports a presence cache. clear_presences abstractmethod async # clear_presences () Empty the presences cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_presence abstractmethod async # delete_presence ( guild_id , user_id ) Remove a presence from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION guild_id The ID of the guild to remove a cached presence for. TYPE: hikari . Snowflakeish user_id The ID of the user to remove a cached presence for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_presence abstractmethod async # get_presence ( guild_id , user_id ) Get a presence from the cache. PARAMETER DESCRIPTION guild_id The ID of the guild to get a cached presence for. TYPE: hikari . Snowflakeish user_id The ID of the user to get a cached presence for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . presences . MemberPresence The object of the presence fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_presences abstractmethod # iter_presences () Iterate over the presences stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . presences . MemberPresence ] An async iterator of the presences stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. RefCache # Bases: Cache , RefGuildCache , RefEmojiCache , RefGuildChannelCache , RefInviteCache , RefMeCache , RefMemberCache , RefMessageCache , RefPresenceCache , RefRoleCache , RefUserCache , RefVoiceStateCache , abc . ABC Protocol of a cache which implements all the defined reference resources. RefEmojiCache # Bases: EmojiCache , abc . ABC The traits of a implementation which supports a referential emoji cache. clear_emojis_for_guild abstractmethod async # clear_emojis_for_guild ( guild_id ) Remove emojis belonging to a specific guild from the cache. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the emojis cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. iter_emojis_for_guild abstractmethod # iter_emojis_for_guild ( guild_id ) Iterate over the emojis stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the emojis cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . emojis . KnownCustomEmoji ] An async iterator of the emojis stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. RefGuildChannelCache # Bases: GuildChannelCache , abc . ABC The traits of a implementation which supports a referential guild channel cache. clear_guild_channels_for_guild abstractmethod async # clear_guild_channels_for_guild ( guild_id ) Remove the guild channel cache store for the specified guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the cached channels for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. iter_guild_channels_for_guild abstractmethod # iter_guild_channels_for_guild ( guild_id ) Iterate over the guild channels stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the guild channels cached for it. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . channels . PermissibleGuildChannel ] An async iterator of the guild channels stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. RefInviteCache # Bases: InviteCache , abc . ABC The traits of a implementation which supports a referential invite cache. clear_invites_for_channel abstractmethod async # clear_invites_for_channel ( channel_id ) Remove invites cached for a specific channel.. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION channel_id The ID of the channel to remove the invites cached for it. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. clear_invites_for_guild abstractmethod async # clear_invites_for_guild ( guild_id ) Remove invites cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the invites cached for it. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. iter_invites_for_channel abstractmethod # iter_invites_for_channel ( channel_id ) Iterate over the invites stored in the cache for a specific channel. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION channel_id The ID of the channel to iterate over the invites cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . invites . InviteWithMetadata ] An async iterator of the invites stored in the cache for the specified channel. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_invites_for_guild abstractmethod # iter_invites_for_guild ( guild_id ) Iterate over the invites stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the invites cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . invites . InviteWithMetadata ] An async iterator of the invites stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. RefMemberCache # Bases: MemberCache , abc . ABC The traits of a implementation which supports a referential member cache. clear_members_for_guild abstractmethod async # clear_members_for_guild ( guild_id ) Remove the members cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the cached members for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. clear_members_for_user abstractmethod async # clear_members_for_user ( user_id ) Remove the members cached for a specific user. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION user_id The ID of the user to remove the cached members for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. iter_members_for_guild abstractmethod # iter_members_for_guild ( guild_id ) Iterate over the members stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to get the members cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Member ] An async iterator of the members stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_members_for_user abstractmethod # iter_members_for_user ( user_id ) Iterate over the members stored in the cache for a specific user. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION user_id The ID of the guild to get the user cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Member ] An async iterator of the members stored in the cache for the specified user. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. RefMessageCache # Bases: MessageCache , abc . ABC The traits of a implementation which supports a referential message cache. clear_messages_for_author abstractmethod async # clear_messages_for_author ( user_id ) Remove the messages cached for a specific author. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION user_id The ID of the user to remove the messages cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. clear_messages_for_channel abstractmethod async # clear_messages_for_channel ( channel_id ) Remove the messages cached for a specific channel. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION channel_id The ID of the channel to remove the messages cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. clear_messages_for_guild abstractmethod async # clear_messages_for_guild ( guild_id ) Remove the messages cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the messages cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. iter_message_for_channel abstractmethod # iter_message_for_channel ( channel_id ) Iterate over the messages stored in the cache for a specific channel. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION channel_id The ID of the channel to iterate over the messages cached for them. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . messages . Message ] An async iterator of the messages stored in the cache for the specified channel. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_messages_for_author abstractmethod # iter_messages_for_author ( user_id ) Iterate over the messages stored in the cache for a specific author. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION user_id The ID of the user to iterate over the messages cached for them. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . messages . Message ] An async iterator of the messages stored in the cache for the specified user. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_messages_for_guild abstractmethod # iter_messages_for_guild ( guild_id ) Iterate over the messages stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the messages cached for them. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . messages . Message ] An async iterator of the messages stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. RefPresenceCache # Bases: PresenceCache , abc . ABC The traits of a implementation which supports a referential presence cache. clear_presences_for_guild abstractmethod async # clear_presences_for_guild ( guild_id ) Remove the presences cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the cached presences for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. clear_presences_for_user abstractmethod async # clear_presences_for_user ( user_id ) Remove the presences cached for a specific user. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION user_id The ID of the user to remove the cached presences for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. iter_presences_for_guild abstractmethod # iter_presences_for_guild ( guild_id ) Iterate over the presences stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the cached presences for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . presences . MemberPresence ] An async iterator of the presences stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_presences_for_user abstractmethod # iter_presences_for_user ( user_id ) Iterate over the presences stored in the cache for a specific user. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION user_id The ID of the user to iterate over the cached presences for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . presences . MemberPresence ] An async iterator of the presences stored in the cache for the specified user. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. RefRoleCache # Bases: RoleCache , abc . ABC The traits of a implementation which supports a referential role cache. clear_roles_for_guild abstractmethod async # clear_roles_for_guild ( guild_id ) Remove the roles cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the cached roles for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. iter_roles_for_guild abstractmethod # iter_roles_for_guild ( guild_id ) Iterate over the roles stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to get the roles cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Role ] An async iterator of the roles stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. RefVoiceStateCache # Bases: VoiceStateCache , abc . ABC The traits of a implementation which supports a referential voice state cache. clear_voice_states_for_channel abstractmethod async # clear_voice_states_for_channel ( channel_id ) Remove the voice states cached for a specified channel. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION channel_id The ID of the channel to remove the voice states cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. clear_voice_states_for_guild abstractmethod async # clear_voice_states_for_guild ( guild_id ) Remove the voice states cached for a specified guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the voice states cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. iter_voice_states_for_channel abstractmethod # iter_voice_states_for_channel ( channel_id ) Iterate over the voice states stored in the cache for a specific channel. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION channel_id The ID of the channel to iterate over the voice states cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . voices . VoiceState ] An async iterator of the voice states stored in the cache for the specified channel. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_voice_states_for_guild abstractmethod # iter_voice_states_for_guild ( guild_id ) Iterate over the voice states stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the voice states cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . voices . VoiceState ] An async iterator of the voice states stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. Resource # Bases: abc . ABC The basic interface which all cache resources should implement. close abstractmethod async # close () Close the resource(s) and allow them to disconnect from their relevant backend(s). Note This should pass without raising if called on an already closed resource. is_alive property abstractmethod # is_alive () Whether this client is alive. open abstractmethod async # open () Startup the resource(s) and allow them to connect to their relevant backend(s). Note This should pass without raising if called on an already opened resource. RoleCache # Bases: Resource , abc . ABC The traits of a implementation which supports a role cache. clear_roles abstractmethod async # clear_roles () Empty the roles cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_role abstractmethod async # delete_role ( role_id ) Remove a role from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION role_id The ID of the role to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_role abstractmethod async # get_role ( role_id ) Get a role from the cache. PARAMETER DESCRIPTION role_id The ID of the role to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . guilds . Role The object of the role fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_roles abstractmethod # iter_roles () Iterate over the roles stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Role ] An async iterator of the roles stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. UserCache # Bases: Resource , abc . ABC The traits of a cache implementation which supports a user cache. Note Unlike other resources, user doesn't have any events which directly update it and may only be updated through event listeners when resources which reference it are also included. clear_users abstractmethod async # clear_users () Empty the users cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_user abstractmethod async # delete_user ( user_id ) Remove a user from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION user_id The ID of the user to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_user abstractmethod async # get_user ( user_id ) Get a user from the cache. PARAMETER DESCRIPTION user_id The ID of the user to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . users . User The object of the user fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_users abstractmethod # iter_users () Iterate over the users stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . users . User ] An async iterator of the users stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. VoiceStateCache # Bases: Resource , abc . ABC The traits of a implementation which supports a voice state cache. clear_voice_states abstractmethod async # clear_voice_states () Empty the voice states cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. delete_voice_state abstractmethod async # delete_voice_state ( guild_id , user_id ) Remove a voice state from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION guild_id The ID of the guild to remove a cached voice state for. TYPE: hikari . Snowflakeish user_id The ID of the user to remove a cached voice state for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. get_voice_state abstractmethod async # get_voice_state ( guild_id , user_id ) Get a voice state from the cache. PARAMETER DESCRIPTION guild_id The ID of the guild to get a cached voice state for. TYPE: hikari . Snowflakeish user_id The ID of the user to get a cached voice state for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . voices . VoiceState The object of the voice state fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store. iter_voice_states abstractmethod # iter_voice_states () Iterate over the voice states stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . voices . VoiceState ] An async iterator of the voice states stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"sake.abc"},{"location":"reference/abc/#sakeabc","text":"Protocols and abstract classes for the cache resources defined by this standard. Note Unlike the abstract classes defined here, there is no guarantee that the protocols defined here will be included in the MRO of the classes which implement them.","title":"sake.abc"},{"location":"reference/abc/#sake.abc.Cache","text":"Bases: GuildCache , EmojiCache , GuildChannelCache , InviteCache , MeCache , MemberCache , MessageCache , PresenceCache , RoleCache , UserCache , VoiceStateCache , abc . ABC Protocol of a cache which implements all the defined resources.","title":"Cache"},{"location":"reference/abc/#sake.abc.CacheIterator","text":"Bases: hikari . LazyIterator [ _T ] , abc . ABC A asynchronous iterator of entries within a defined cache store.","title":"CacheIterator"},{"location":"reference/abc/#sake.abc.CacheIterator.len","text":"len () Get the count of entries that this iterator covers. Note Unlike hikari.iterators.LazyIterator.count , this will not exhaust the iterator and may return different values as entries are added and removed from the cache. RETURNS DESCRIPTION int The count of entries that this iterator covers as of the call.","title":"len()"},{"location":"reference/abc/#sake.abc.EmojiCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a emoji cache.","title":"EmojiCache"},{"location":"reference/abc/#sake.abc.EmojiCache.clear_emojis","text":"clear_emojis () Empty the emoji cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_emojis()"},{"location":"reference/abc/#sake.abc.EmojiCache.delete_emoji","text":"delete_emoji ( emoji_id ) Remove an emoji from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION emoji_id The ID of the emoji to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_emoji()"},{"location":"reference/abc/#sake.abc.EmojiCache.get_emoji","text":"get_emoji ( emoji_id ) Get an emoji from the cache. PARAMETER DESCRIPTION emoji_id The ID of the emoji to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . emojis . KnownCustomEmoji The object of the emoji fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_emoji()"},{"location":"reference/abc/#sake.abc.EmojiCache.iter_emojis","text":"iter_emojis () Iterate over the emojis stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . emojis . KnownCustomEmoji ] An async iterator of the emojis stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_emojis()"},{"location":"reference/abc/#sake.abc.GuildCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a guild cache.","title":"GuildCache"},{"location":"reference/abc/#sake.abc.GuildCache.clear_guilds","text":"clear_guilds () Empty the guild cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_guilds()"},{"location":"reference/abc/#sake.abc.GuildCache.delete_guild","text":"delete_guild ( guild_id ) Remove a guild from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION guild_id The ID of the guild to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_guild()"},{"location":"reference/abc/#sake.abc.GuildCache.get_guild","text":"get_guild ( guild_id ) Get a guild from the cache. PARAMETER DESCRIPTION guild_id The ID of the guild to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . guilds . GatewayGuild The object of the guild fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_guild()"},{"location":"reference/abc/#sake.abc.GuildCache.iter_guilds","text":"iter_guilds () Iterate over the guilds stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . guilds . GatewayGuild ] An async iterator of the guilds stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_guilds()"},{"location":"reference/abc/#sake.abc.GuildChannelCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a guild channel cache.","title":"GuildChannelCache"},{"location":"reference/abc/#sake.abc.GuildChannelCache.clear_guild_channels","text":"clear_guild_channels () Empty the guild channel cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_guild_channels()"},{"location":"reference/abc/#sake.abc.GuildChannelCache.delete_guild_channel","text":"delete_guild_channel ( channel_id ) Remove a guild guild channel from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION channel_id The ID of the guild channel to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_guild_channel()"},{"location":"reference/abc/#sake.abc.GuildChannelCache.get_guild_channel","text":"get_guild_channel ( channel_id ) Get a guild channel from the cache. PARAMETER DESCRIPTION channel_id The ID of the guild channel to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . channels . PermissibleGuildChannel The object of the guild channel fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_guild_channel()"},{"location":"reference/abc/#sake.abc.GuildChannelCache.iter_guild_channels","text":"iter_guild_channels () Iterate over the guild channels stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . channels . PermissibleGuildChannel ] An async iterator of the guild channels stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_guild_channels()"},{"location":"reference/abc/#sake.abc.InviteCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a invite cache.","title":"InviteCache"},{"location":"reference/abc/#sake.abc.InviteCache.clear_invites","text":"clear_invites () Empty the invites cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_invites()"},{"location":"reference/abc/#sake.abc.InviteCache.delete_invite","text":"delete_invite ( invite_code ) Remove an invite channel from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION invite_code The code of the invite to remove from the cache. TYPE: str RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_invite()"},{"location":"reference/abc/#sake.abc.InviteCache.get_invite","text":"get_invite ( invite_code ) Get an invite from the cache. PARAMETER DESCRIPTION invite_code The code of the invite to get from the cache. TYPE: str RETURNS DESCRIPTION hikari . invites . InviteWithMetadata The object of the invite fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_invite()"},{"location":"reference/abc/#sake.abc.InviteCache.iter_invites","text":"iter_invites () Iterate over the invites stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . invites . InviteWithMetadata ] An async iterator of the invites stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_invites()"},{"location":"reference/abc/#sake.abc.MeCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a own user cache.","title":"MeCache"},{"location":"reference/abc/#sake.abc.MeCache.delete_me","text":"delete_me () Remove the cached own user entry. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_me()"},{"location":"reference/abc/#sake.abc.MeCache.get_me","text":"get_me () Get the own user cache entry. RETURNS DESCRIPTION hikari . users . OwnUser The object of the own user fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_me()"},{"location":"reference/abc/#sake.abc.MemberCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a member cache.","title":"MemberCache"},{"location":"reference/abc/#sake.abc.MemberCache.clear_members","text":"clear_members () Empty the members cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_members()"},{"location":"reference/abc/#sake.abc.MemberCache.delete_member","text":"delete_member ( guild_id , user_id ) Remove a member from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION guild_id The ID of the guild to remove a cached member for. TYPE: hikari . Snowflakeish user_id The ID of the user to remove a cached member for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_member()"},{"location":"reference/abc/#sake.abc.MemberCache.get_member","text":"get_member ( guild_id , user_id ) Get a member from the cache. PARAMETER DESCRIPTION guild_id The ID of the guild to get a cached member for. TYPE: hikari . Snowflakeish user_id The ID of the user to get a cached member for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . guilds . Member The object of the member fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_member()"},{"location":"reference/abc/#sake.abc.MemberCache.iter_members","text":"iter_members () Iterate over the members stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Member ] An async iterator of the members stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_members()"},{"location":"reference/abc/#sake.abc.MessageCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a message cache.","title":"MessageCache"},{"location":"reference/abc/#sake.abc.MessageCache.clear_messages","text":"clear_messages () Empty the messages cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_messages()"},{"location":"reference/abc/#sake.abc.MessageCache.delete_message","text":"delete_message ( message_id ) Remove a message from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION message_id The ID of the message to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_message()"},{"location":"reference/abc/#sake.abc.MessageCache.get_message","text":"get_message ( message_id ) Get a message from the cache. PARAMETER DESCRIPTION message_id The ID of the message to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . messages . Message The object of the message fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_message()"},{"location":"reference/abc/#sake.abc.MessageCache.iter_messages","text":"iter_messages () Iterate over the messages stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . messages . Message ] An async iterator of the messages stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_messages()"},{"location":"reference/abc/#sake.abc.PresenceCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a presence cache.","title":"PresenceCache"},{"location":"reference/abc/#sake.abc.PresenceCache.clear_presences","text":"clear_presences () Empty the presences cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_presences()"},{"location":"reference/abc/#sake.abc.PresenceCache.delete_presence","text":"delete_presence ( guild_id , user_id ) Remove a presence from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION guild_id The ID of the guild to remove a cached presence for. TYPE: hikari . Snowflakeish user_id The ID of the user to remove a cached presence for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_presence()"},{"location":"reference/abc/#sake.abc.PresenceCache.get_presence","text":"get_presence ( guild_id , user_id ) Get a presence from the cache. PARAMETER DESCRIPTION guild_id The ID of the guild to get a cached presence for. TYPE: hikari . Snowflakeish user_id The ID of the user to get a cached presence for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . presences . MemberPresence The object of the presence fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_presence()"},{"location":"reference/abc/#sake.abc.PresenceCache.iter_presences","text":"iter_presences () Iterate over the presences stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . presences . MemberPresence ] An async iterator of the presences stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_presences()"},{"location":"reference/abc/#sake.abc.RefCache","text":"Bases: Cache , RefGuildCache , RefEmojiCache , RefGuildChannelCache , RefInviteCache , RefMeCache , RefMemberCache , RefMessageCache , RefPresenceCache , RefRoleCache , RefUserCache , RefVoiceStateCache , abc . ABC Protocol of a cache which implements all the defined reference resources.","title":"RefCache"},{"location":"reference/abc/#sake.abc.RefEmojiCache","text":"Bases: EmojiCache , abc . ABC The traits of a implementation which supports a referential emoji cache.","title":"RefEmojiCache"},{"location":"reference/abc/#sake.abc.RefEmojiCache.clear_emojis_for_guild","text":"clear_emojis_for_guild ( guild_id ) Remove emojis belonging to a specific guild from the cache. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the emojis cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_emojis_for_guild()"},{"location":"reference/abc/#sake.abc.RefEmojiCache.iter_emojis_for_guild","text":"iter_emojis_for_guild ( guild_id ) Iterate over the emojis stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the emojis cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . emojis . KnownCustomEmoji ] An async iterator of the emojis stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_emojis_for_guild()"},{"location":"reference/abc/#sake.abc.RefGuildChannelCache","text":"Bases: GuildChannelCache , abc . ABC The traits of a implementation which supports a referential guild channel cache.","title":"RefGuildChannelCache"},{"location":"reference/abc/#sake.abc.RefGuildChannelCache.clear_guild_channels_for_guild","text":"clear_guild_channels_for_guild ( guild_id ) Remove the guild channel cache store for the specified guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the cached channels for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_guild_channels_for_guild()"},{"location":"reference/abc/#sake.abc.RefGuildChannelCache.iter_guild_channels_for_guild","text":"iter_guild_channels_for_guild ( guild_id ) Iterate over the guild channels stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the guild channels cached for it. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . channels . PermissibleGuildChannel ] An async iterator of the guild channels stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_guild_channels_for_guild()"},{"location":"reference/abc/#sake.abc.RefInviteCache","text":"Bases: InviteCache , abc . ABC The traits of a implementation which supports a referential invite cache.","title":"RefInviteCache"},{"location":"reference/abc/#sake.abc.RefInviteCache.clear_invites_for_channel","text":"clear_invites_for_channel ( channel_id ) Remove invites cached for a specific channel.. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION channel_id The ID of the channel to remove the invites cached for it. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_invites_for_channel()"},{"location":"reference/abc/#sake.abc.RefInviteCache.clear_invites_for_guild","text":"clear_invites_for_guild ( guild_id ) Remove invites cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the invites cached for it. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_invites_for_guild()"},{"location":"reference/abc/#sake.abc.RefInviteCache.iter_invites_for_channel","text":"iter_invites_for_channel ( channel_id ) Iterate over the invites stored in the cache for a specific channel. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION channel_id The ID of the channel to iterate over the invites cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . invites . InviteWithMetadata ] An async iterator of the invites stored in the cache for the specified channel. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_invites_for_channel()"},{"location":"reference/abc/#sake.abc.RefInviteCache.iter_invites_for_guild","text":"iter_invites_for_guild ( guild_id ) Iterate over the invites stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the invites cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . invites . InviteWithMetadata ] An async iterator of the invites stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_invites_for_guild()"},{"location":"reference/abc/#sake.abc.RefMemberCache","text":"Bases: MemberCache , abc . ABC The traits of a implementation which supports a referential member cache.","title":"RefMemberCache"},{"location":"reference/abc/#sake.abc.RefMemberCache.clear_members_for_guild","text":"clear_members_for_guild ( guild_id ) Remove the members cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the cached members for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_members_for_guild()"},{"location":"reference/abc/#sake.abc.RefMemberCache.clear_members_for_user","text":"clear_members_for_user ( user_id ) Remove the members cached for a specific user. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION user_id The ID of the user to remove the cached members for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_members_for_user()"},{"location":"reference/abc/#sake.abc.RefMemberCache.iter_members_for_guild","text":"iter_members_for_guild ( guild_id ) Iterate over the members stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to get the members cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Member ] An async iterator of the members stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_members_for_guild()"},{"location":"reference/abc/#sake.abc.RefMemberCache.iter_members_for_user","text":"iter_members_for_user ( user_id ) Iterate over the members stored in the cache for a specific user. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION user_id The ID of the guild to get the user cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Member ] An async iterator of the members stored in the cache for the specified user. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_members_for_user()"},{"location":"reference/abc/#sake.abc.RefMessageCache","text":"Bases: MessageCache , abc . ABC The traits of a implementation which supports a referential message cache.","title":"RefMessageCache"},{"location":"reference/abc/#sake.abc.RefMessageCache.clear_messages_for_author","text":"clear_messages_for_author ( user_id ) Remove the messages cached for a specific author. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION user_id The ID of the user to remove the messages cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_messages_for_author()"},{"location":"reference/abc/#sake.abc.RefMessageCache.clear_messages_for_channel","text":"clear_messages_for_channel ( channel_id ) Remove the messages cached for a specific channel. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION channel_id The ID of the channel to remove the messages cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_messages_for_channel()"},{"location":"reference/abc/#sake.abc.RefMessageCache.clear_messages_for_guild","text":"clear_messages_for_guild ( guild_id ) Remove the messages cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the messages cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_messages_for_guild()"},{"location":"reference/abc/#sake.abc.RefMessageCache.iter_message_for_channel","text":"iter_message_for_channel ( channel_id ) Iterate over the messages stored in the cache for a specific channel. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION channel_id The ID of the channel to iterate over the messages cached for them. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . messages . Message ] An async iterator of the messages stored in the cache for the specified channel. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_message_for_channel()"},{"location":"reference/abc/#sake.abc.RefMessageCache.iter_messages_for_author","text":"iter_messages_for_author ( user_id ) Iterate over the messages stored in the cache for a specific author. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION user_id The ID of the user to iterate over the messages cached for them. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . messages . Message ] An async iterator of the messages stored in the cache for the specified user. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_messages_for_author()"},{"location":"reference/abc/#sake.abc.RefMessageCache.iter_messages_for_guild","text":"iter_messages_for_guild ( guild_id ) Iterate over the messages stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the messages cached for them. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . messages . Message ] An async iterator of the messages stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_messages_for_guild()"},{"location":"reference/abc/#sake.abc.RefPresenceCache","text":"Bases: PresenceCache , abc . ABC The traits of a implementation which supports a referential presence cache.","title":"RefPresenceCache"},{"location":"reference/abc/#sake.abc.RefPresenceCache.clear_presences_for_guild","text":"clear_presences_for_guild ( guild_id ) Remove the presences cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the cached presences for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_presences_for_guild()"},{"location":"reference/abc/#sake.abc.RefPresenceCache.clear_presences_for_user","text":"clear_presences_for_user ( user_id ) Remove the presences cached for a specific user. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION user_id The ID of the user to remove the cached presences for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_presences_for_user()"},{"location":"reference/abc/#sake.abc.RefPresenceCache.iter_presences_for_guild","text":"iter_presences_for_guild ( guild_id ) Iterate over the presences stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the cached presences for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . presences . MemberPresence ] An async iterator of the presences stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_presences_for_guild()"},{"location":"reference/abc/#sake.abc.RefPresenceCache.iter_presences_for_user","text":"iter_presences_for_user ( user_id ) Iterate over the presences stored in the cache for a specific user. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION user_id The ID of the user to iterate over the cached presences for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . presences . MemberPresence ] An async iterator of the presences stored in the cache for the specified user. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_presences_for_user()"},{"location":"reference/abc/#sake.abc.RefRoleCache","text":"Bases: RoleCache , abc . ABC The traits of a implementation which supports a referential role cache.","title":"RefRoleCache"},{"location":"reference/abc/#sake.abc.RefRoleCache.clear_roles_for_guild","text":"clear_roles_for_guild ( guild_id ) Remove the roles cached for a specific guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the cached roles for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_roles_for_guild()"},{"location":"reference/abc/#sake.abc.RefRoleCache.iter_roles_for_guild","text":"iter_roles_for_guild ( guild_id ) Iterate over the roles stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to get the roles cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Role ] An async iterator of the roles stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_roles_for_guild()"},{"location":"reference/abc/#sake.abc.RefVoiceStateCache","text":"Bases: VoiceStateCache , abc . ABC The traits of a implementation which supports a referential voice state cache.","title":"RefVoiceStateCache"},{"location":"reference/abc/#sake.abc.RefVoiceStateCache.clear_voice_states_for_channel","text":"clear_voice_states_for_channel ( channel_id ) Remove the voice states cached for a specified channel. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION channel_id The ID of the channel to remove the voice states cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_voice_states_for_channel()"},{"location":"reference/abc/#sake.abc.RefVoiceStateCache.clear_voice_states_for_guild","text":"clear_voice_states_for_guild ( guild_id ) Remove the voice states cached for a specified guild. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. PARAMETER DESCRIPTION guild_id The ID of the guild to remove the voice states cached for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_voice_states_for_guild()"},{"location":"reference/abc/#sake.abc.RefVoiceStateCache.iter_voice_states_for_channel","text":"iter_voice_states_for_channel ( channel_id ) Iterate over the voice states stored in the cache for a specific channel. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION channel_id The ID of the channel to iterate over the voice states cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . voices . VoiceState ] An async iterator of the voice states stored in the cache for the specified channel. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_voice_states_for_channel()"},{"location":"reference/abc/#sake.abc.RefVoiceStateCache.iter_voice_states_for_guild","text":"iter_voice_states_for_guild ( guild_id ) Iterate over the voice states stored in the cache for a specific guild. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. PARAMETER DESCRIPTION guild_id The ID of the guild to iterate over the voice states cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ hikari . voices . VoiceState ] An async iterator of the voice states stored in the cache for the specified guild. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_voice_states_for_guild()"},{"location":"reference/abc/#sake.abc.Resource","text":"Bases: abc . ABC The basic interface which all cache resources should implement.","title":"Resource"},{"location":"reference/abc/#sake.abc.Resource.close","text":"close () Close the resource(s) and allow them to disconnect from their relevant backend(s). Note This should pass without raising if called on an already closed resource.","title":"close()"},{"location":"reference/abc/#sake.abc.Resource.is_alive","text":"is_alive () Whether this client is alive.","title":"is_alive()"},{"location":"reference/abc/#sake.abc.Resource.open","text":"open () Startup the resource(s) and allow them to connect to their relevant backend(s). Note This should pass without raising if called on an already opened resource.","title":"open()"},{"location":"reference/abc/#sake.abc.RoleCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a role cache.","title":"RoleCache"},{"location":"reference/abc/#sake.abc.RoleCache.clear_roles","text":"clear_roles () Empty the roles cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_roles()"},{"location":"reference/abc/#sake.abc.RoleCache.delete_role","text":"delete_role ( role_id ) Remove a role from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION role_id The ID of the role to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_role()"},{"location":"reference/abc/#sake.abc.RoleCache.get_role","text":"get_role ( role_id ) Get a role from the cache. PARAMETER DESCRIPTION role_id The ID of the role to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . guilds . Role The object of the role fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_role()"},{"location":"reference/abc/#sake.abc.RoleCache.iter_roles","text":"iter_roles () Iterate over the roles stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . guilds . Role ] An async iterator of the roles stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_roles()"},{"location":"reference/abc/#sake.abc.UserCache","text":"Bases: Resource , abc . ABC The traits of a cache implementation which supports a user cache. Note Unlike other resources, user doesn't have any events which directly update it and may only be updated through event listeners when resources which reference it are also included.","title":"UserCache"},{"location":"reference/abc/#sake.abc.UserCache.clear_users","text":"clear_users () Empty the users cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_users()"},{"location":"reference/abc/#sake.abc.UserCache.delete_user","text":"delete_user ( user_id ) Remove a user from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION user_id The ID of the user to remove from the cache. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_user()"},{"location":"reference/abc/#sake.abc.UserCache.get_user","text":"get_user ( user_id ) Get a user from the cache. PARAMETER DESCRIPTION user_id The ID of the user to get from the cache. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . users . User The object of the user fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_user()"},{"location":"reference/abc/#sake.abc.UserCache.iter_users","text":"iter_users () Iterate over the users stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . users . User ] An async iterator of the users stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_users()"},{"location":"reference/abc/#sake.abc.VoiceStateCache","text":"Bases: Resource , abc . ABC The traits of a implementation which supports a voice state cache.","title":"VoiceStateCache"},{"location":"reference/abc/#sake.abc.VoiceStateCache.clear_voice_states","text":"clear_voice_states () Empty the voice states cache store. Note There is no guarantee that this operation will be complete before the returned coroutine finishes. RAISES DESCRIPTION sake . errors . BackendError Raised when this call failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"clear_voice_states()"},{"location":"reference/abc/#sake.abc.VoiceStateCache.delete_voice_state","text":"delete_voice_state ( guild_id , user_id ) Remove a voice state from the cache. Note Delete methods do not raise sake.errors.EntryNotFound when the targeted entity doesn't exist. PARAMETER DESCRIPTION guild_id The ID of the guild to remove a cached voice state for. TYPE: hikari . Snowflakeish user_id The ID of the user to remove a cached voice state for. TYPE: hikari . Snowflakeish RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues.","title":"delete_voice_state()"},{"location":"reference/abc/#sake.abc.VoiceStateCache.get_voice_state","text":"get_voice_state ( guild_id , user_id ) Get a voice state from the cache. PARAMETER DESCRIPTION guild_id The ID of the guild to get a cached voice state for. TYPE: hikari . Snowflakeish user_id The ID of the user to get a cached voice state for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION hikari . voices . VoiceState The object of the voice state fetched from the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . EntryNotFound Raised when the targeted entity wasn't found. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"get_voice_state()"},{"location":"reference/abc/#sake.abc.VoiceStateCache.iter_voice_states","text":"iter_voice_states () Iterate over the voice states stored in the cache. Note Errors won't be raised by the initial call to this method but rather while iterating over the returned asynchronous iterator. RETURNS DESCRIPTION CacheIterator [ hikari . voices . VoiceState ] An async iterator of the voice states stored in the cache. RAISES DESCRIPTION sake . errors . BackendError Raised when this failed to communicate with the cache's backend. This may be a sign of underlying network or database issues. sake . errors . InvalidDataFound Raised when the data retrieved from the backend datastore was either invalid for this implementation or corrupt. This may be a sign of multiple sake versions or implementations being used with the same backend store.","title":"iter_voice_states()"},{"location":"reference/errors/","text":"sake.errors # The standard error bases which Sake implementations will be raising. Note These supplement python's builtin exceptions but do not replace them. BackendError # Bases: SakeException , ValueError Error that's raised when communicating with the backend fails. This may be a sign of underlying network or database issues. CannotDelete # Bases: SakeException , ValueError Error that's raised in response to an attempt to delete an entry which can't be deleted. This most likely reason for this to be raised would be due to an attempt to deleted a entry that's being kept alive by references without specifying to cascade references in a referential database. ClosedClient # Bases: SakeException Error that's raised when an attempt to use an inactive client is made. EntryNotFound # Bases: SakeException , LookupError Error that's raised in response to an attempt to get an entry which doesn't exist. Note This shouldn't ever be raised by a delete method or iter method. InvalidDataFound # Bases: SakeException , LookupError Error that's raised when the retrieved data is in an unexpected format. This may indicate that you are running different versions of a Sake implementation with the same database. SakeException # Bases: Exception Base exception for the expected exceptions raised by Sake implementations. base class-attribute # base : typing . Optional [ Exception ] The exception which caused this exception if applicable else None . __init__ # __init__ ( message , * , exception = None ) Initialise a sake exception instance. PARAMETER DESCRIPTION message The exception's message. TYPE: str exception The exception which caused this exception if applicable else None . TYPE: typing . Optional [ Exception ] DEFAULT: None","title":"sake.errors"},{"location":"reference/errors/#sakeerrors","text":"The standard error bases which Sake implementations will be raising. Note These supplement python's builtin exceptions but do not replace them.","title":"sake.errors"},{"location":"reference/errors/#sake.errors.BackendError","text":"Bases: SakeException , ValueError Error that's raised when communicating with the backend fails. This may be a sign of underlying network or database issues.","title":"BackendError"},{"location":"reference/errors/#sake.errors.CannotDelete","text":"Bases: SakeException , ValueError Error that's raised in response to an attempt to delete an entry which can't be deleted. This most likely reason for this to be raised would be due to an attempt to deleted a entry that's being kept alive by references without specifying to cascade references in a referential database.","title":"CannotDelete"},{"location":"reference/errors/#sake.errors.ClosedClient","text":"Bases: SakeException Error that's raised when an attempt to use an inactive client is made.","title":"ClosedClient"},{"location":"reference/errors/#sake.errors.EntryNotFound","text":"Bases: SakeException , LookupError Error that's raised in response to an attempt to get an entry which doesn't exist. Note This shouldn't ever be raised by a delete method or iter method.","title":"EntryNotFound"},{"location":"reference/errors/#sake.errors.InvalidDataFound","text":"Bases: SakeException , LookupError Error that's raised when the retrieved data is in an unexpected format. This may indicate that you are running different versions of a Sake implementation with the same database.","title":"InvalidDataFound"},{"location":"reference/errors/#sake.errors.SakeException","text":"Bases: Exception Base exception for the expected exceptions raised by Sake implementations.","title":"SakeException"},{"location":"reference/errors/#sake.errors.SakeException.base","text":"base : typing . Optional [ Exception ] The exception which caused this exception if applicable else None .","title":"base"},{"location":"reference/errors/#sake.errors.SakeException.__init__","text":"__init__ ( message , * , exception = None ) Initialise a sake exception instance. PARAMETER DESCRIPTION message The exception's message. TYPE: str exception The exception which caused this exception if applicable else None . TYPE: typing . Optional [ Exception ] DEFAULT: None","title":"__init__()"},{"location":"reference/redis/","text":"sake.redis # Redis based implementations of Sake's clients. DEFAULT_EXPIRE module-attribute # DEFAULT_EXPIRE : typing . Final [ int ] = 3600000 The default expire time (in milliseconds) used for expiring resources of 60 minutes. DEFAULT_FAST_EXPIRE module-attribute # DEFAULT_FAST_EXPIRE : typing . Final [ int ] = 300000 The default expire time (in milliseconds) used for expiring resources quickly of 5 minutes. DEFAULT_INVITE_EXPIRE module-attribute # DEFAULT_INVITE_EXPIRE : typing . Final [ int ] = 2592000000 A special case month long default expire time for invite entries without a set \"expire_at\". DEFAULT_SLOW_EXPIRE module-attribute # DEFAULT_SLOW_EXPIRE : typing . Final [ int ] = 604800 The default expire time (in milliseconds) used for gateway-event deleted resources (1 week). EmojiCache # Bases: _Reference , sake_abc . RefEmojiCache Redis implementation of sake.abc.EmojiCache . GuildCache # Bases: ResourceClient , sake_abc . GuildCache Redis implementation of sake.abc.GuildCache . GuildChannelCache # Bases: _Reference , sake_abc . RefGuildChannelCache Redis implementation of sake.abc.RefGuildChannelCache . InviteCache # Bases: ResourceClient , sake_abc . InviteCache Redis implementation of sake.abc.InviteCache . with_invite_expire # with_invite_expire ( expire ) Set the default expire time for invite entries added with this client. PARAMETER DESCRIPTION expire The default expire time to add for invites in this cache or None to set back to the default behaviour. This may either be the number of seconds as an int or float (where millisecond precision is supported) or a timedelta. TYPE: typing . Optional [ _internal . ExpireT ] RETURNS DESCRIPTION Self The client this is being called on to enable chained calls. MemberCache # Bases: ResourceClient , sake_abc . MemberCache Redis implementation of sake.abc.MemberCache . MessageCache # Bases: ResourceClient , sake_abc . MessageCache Redis implementation of sake.abc.MessageCache . with_message_expire # with_message_expire ( expire ) Set the default expire time for message entries added with this client. PARAMETER DESCRIPTION expire The default expire time to add for messages in this cache or None to set back to the default behaviour. This may either be the number of seconds as an int or float (where millisecond precision is supported) or a timedelta. TYPE: typing . Optional [ _internal . ExpireT ] RETURNS DESCRIPTION Self The client this is being called on to enable chained calls. PresenceCache # Bases: ResourceClient , sake_abc . PresenceCache Redis implementation of sake.abc.PresenceCache . RedisCache # Bases: GuildCache , EmojiCache , GuildChannelCache , InviteCache , MemberCache , MessageCache , PresenceCache , RoleCache , UserCache , VoiceStateCache , sake_abc . Cache A Redis implementation of all the defined cache resources. ResourceClient # Bases: sake_abc . Resource , abc . ABC A base client which all resources in this implementation will implement. Note This cannot be initialised by itself and is useless alone. __init__ # __init__ ( address , app , event_manager = None , * , config = None , default_expire = DEFAULT_SLOW_EXPIRE , event_managed = False , password = None , max_connections_per_db = 5 , dumps = lambda obj : json . dumps ( obj ) . encode (), loads = json . loads ) Initialise a resource client. PARAMETER DESCRIPTION app The Hikari client all the models returned by this client should be bound to. TYPE: hikari . RESTAware address The address to use to connect to the Redis backend server this resource is linked to. E.g: - \"redis://[[username]:[password]]@localhost:6379\" - \"rediss://[[username]:[password]]@localhost:6379\" - \"unix://[[username]:[password]]@/path/to/socket.sock\" Three URL schemes are supported: - redis:// : creates a TCP socket connection. See more at: https://www.iana.org/assignments/uri-schemes/prov/redis - rediss:// : creates a SSL wrapped TCP socket connection. See more at: https://www.iana.org/assignments/uri-schemes/prov/rediss - unix:// : creates a Unix Domain Socket connection. TYPE: str event_manager The event manager to bind this resource client to. If provided then this client will automatically manage resources based on received gateway events. TYPE: typing . Optional [ hikari . api . EventManager ] DEFAULT: None event_managed Whether the client should be started and stopped based on the attached event_manager's lifetime events. TYPE: bool DEFAULT: False password The password to use to connect to the backend Redis server. TYPE: typing . Optional [ str ] DEFAULT: None RAISES DESCRIPTION ValueError When event_managed is True and event_manager wasn't passed. add_to_tanjun # add_to_tanjun ( client , / , * , trust_get_for = None , tanjun_managed = False ) Add this Redis client to a Tanjun client. This method will register type dependencies for the resources implemented by it (including tanjun.dependencies.async_cache compatible adapters which will allow Tanjun extensions and standard utility such as converters to be aware of this cache). The type dependencies this will register depend on which resources are implemented but are as follows for each standard resource implementation: sake.redis.EmojiCache sake.abc.EmojiCache sake.abc.RefEmojiCache sake.redis.EmojiCache tanjun.dependencies.async_cache.SfCache[hikari.KnownCustomEmoji] tanjun.dependencies.async_cache.SfGuildBound[hikari.KnownCustomEmoji] sake.redis.GuildCache sake.abc.GuildCache sake.redis.GuildCache tanjun.dependencies.async_cache.SfCache[hikari.Guild] tanjun.depepdencies.async_cache.SfCache[hikari.GatewayGuild] sake.redis.GuildChannelCache sake.abc.GuildChannelCache sake.abc.RefGuildChannelCache sake.redis.GuildChannelCache tanjun.dependencies.async_cache.SfCache[hikari.PermissibleGuildChannel] tanjun.dependencies.async_cache.SfGuildBound[hikari.PermissibleGuildChannel] sake.redis.InviteCache sake.abc.InviteCache sake.redis.InviteCache tanjun.dependencies.async_cache.SfCache[hikari.Invite] tanjun.dependencies.async_cache.SfCache[hikari.InviteWithMetadata] sake.redis.MemberCache sake.abc.MemberCache sake.redis.MemberCache tanjun.dependencies.async_cache.SfGuildBound[hikari.Member] sake.redis.MessageCache sake.abc.MessageCache sake.redis.MessageCache tanjun.dependencies.async_cache.SfCache[hikari.Message] sake.redis.PresenceCache sake.abc.PresenceCache sake.redis.PresenceCache tanjun.dependencies.async_cache.SfGuildBound[hikari.MemberPresence] sake.redis.RoleCache sake.abc.RoleCache sake.redis.RoleCache tanjun.dependencies.async_cache.SfCache[hikari.Role] tanjun.dependencies.async_cache.SfGuildBound[hikari.Role] sake.redis.UserCache sake.abc.MeCache sake.abc.UserCache sake.redis.UserCache tanjun.dependencies.async_cache.SingleStoreCache[hikari.OwnUser] tanjun.dependencies.async_cache.SfCache[hikari.User] sake.redis.VoiceStateCache sake.abc.VoiceStateCache sake.redis.VoiceStateCache tanjun.dependencies.async_cache.SfGuildBound[hikari.VoiceState] sake.redis.RedisCache All of the previously listed types sake.abc.Cache sake.redis.RedisCache PARAMETER DESCRIPTION client The Tanjun client to add this client to. TYPE: tanjun . abc . Client trust_get_for A collection of resource types which the tanjun.dependencies.async_cache adapter \"get\" methods should raise tanjun.dependencies.async_cache.EntryNotFound if the entry isn't found rather than just tanjun.dependencies.async_cache.CacheMissError . If not passed then this will default to the following resources: sake.abc.EmojiCache sake.abc.GuildCache sake.abc.GuildChannelCache sake.abc.MemberCache sake.abc.PresenceCache sake.abc.RoleCache sake.abc.VoiceStateCache sake.abc.UserCache (if sake.abc.MemberCache is also implemented). TYPE: typing . Optional [ collections . Collection [ type [ sake_abc . Resource ]]] DEFAULT: None tanjun_managed Whether the client should be started and stopped based on the tanjun client's lifecycle. This is useful if the client isn't being event managed. TYPE: bool DEFAULT: False RAISES DESCRIPTION RuntimeError If this is called in an environment without Tanjun. all_indexes # all_indexes () Get a set of all the Redis client indexes this is using. Note This accounts for index overrides. RETURNS DESCRIPTION collections . abc . MutableSet [ ResourceIndex | int ] A set of all the Redis client indexes this is using. all_intents classmethod # all_intents () The intents required for a client to be sufficient event managed. If not all these intents are present in the linked event manager then this client won't be able to reliably fill and manage the linked redis database(s). app property # app () The Hikari client this resource client is tied to. This is used to build models with a app attribute. config property # config () This client's settings. default_expire property # default_expire () The default expire time used for fields with no actual lifetime. If this is None then these cases will have no set expire after. dump # dump ( data ) Serialize a dict object representation into the form to be stored. PARAMETER DESCRIPTION data The dict object to serialize. TYPE: _ObjectT RETURNS DESCRIPTION bytes The object serialized as bytes. event_manager property # event_manager () The event manager this resource client is using for managing state. get_index_override # get_index_override ( index ) Get the override set for an index. PARAMETER DESCRIPTION index The index to get the override for. TYPE: ResourceIndex RETURNS DESCRIPTION int | None The found override if set, else None . index classmethod abstractmethod # index () The index for the resource which this class is linked to. Note This should be called on specific base classes and will not be accurate after inheritance. Warning This doesn't account for overrides. RETURNS DESCRIPTION collections . abc . Sequence [ ResourceIndex ] The index of the resource this class is linked to. intents classmethod abstractmethod # intents () The intents the resource requires to function properly. Note This should be called on specific base classes and will not be accurate after inheritance. RETURNS DESCRIPTION hikari . intents . Intents The intents the resource requires to function properly. load # load ( data ) Deserialize a bytes representation to a dict object. PARAMETER DESCRIPTION data The bytes representation from the database to a dict object. TYPE: bytes RETURNS DESCRIPTION dict [ str , typing . Any ] The deserialized dict object. with_index_override # with_index_override ( index , / , * , override = None ) Add an index override. PARAMETER DESCRIPTION index The index to override. TYPE: ResourceIndex override The override to set. If this is left at None then any previous override is unset. This will decide which Redis database is targeted for a resource. TYPE: typing . Optional [ int ] DEFAULT: None ResourceIndex # Bases: enum . IntEnum An enum of the indexes used to map cache resources to their redis databases. RoleCache # Bases: _Reference , sake_abc . RoleCache Redis implementation of sake.abc.RoleCache . UserCache # Bases: _MeCache , sake_abc . UserCache Redis implementation of sake.abc.UserCache . with_user_expire # with_user_expire ( expire ) Set the default expire time for user entries added with this client. PARAMETER DESCRIPTION expire The default expire time to add for users in this cache or None to set back to the default behaviour. This may either be the number of seconds as an int or float (where millisecond precision is supported) or a timedelta. TYPE: typing . Optional [ _internal . ExpireT ] RETURNS DESCRIPTION Self The client this is being called on to enable chained calls. VoiceStateCache # Bases: _Reference , sake_abc . VoiceStateCache Redis implementation of sake.abc.VoiceStateCache .","title":"sake.redis"},{"location":"reference/redis/#sakeredis","text":"Redis based implementations of Sake's clients.","title":"sake.redis"},{"location":"reference/redis/#sake.redis.DEFAULT_EXPIRE","text":"DEFAULT_EXPIRE : typing . Final [ int ] = 3600000 The default expire time (in milliseconds) used for expiring resources of 60 minutes.","title":"DEFAULT_EXPIRE"},{"location":"reference/redis/#sake.redis.DEFAULT_FAST_EXPIRE","text":"DEFAULT_FAST_EXPIRE : typing . Final [ int ] = 300000 The default expire time (in milliseconds) used for expiring resources quickly of 5 minutes.","title":"DEFAULT_FAST_EXPIRE"},{"location":"reference/redis/#sake.redis.DEFAULT_INVITE_EXPIRE","text":"DEFAULT_INVITE_EXPIRE : typing . Final [ int ] = 2592000000 A special case month long default expire time for invite entries without a set \"expire_at\".","title":"DEFAULT_INVITE_EXPIRE"},{"location":"reference/redis/#sake.redis.DEFAULT_SLOW_EXPIRE","text":"DEFAULT_SLOW_EXPIRE : typing . Final [ int ] = 604800 The default expire time (in milliseconds) used for gateway-event deleted resources (1 week).","title":"DEFAULT_SLOW_EXPIRE"},{"location":"reference/redis/#sake.redis.EmojiCache","text":"Bases: _Reference , sake_abc . RefEmojiCache Redis implementation of sake.abc.EmojiCache .","title":"EmojiCache"},{"location":"reference/redis/#sake.redis.GuildCache","text":"Bases: ResourceClient , sake_abc . GuildCache Redis implementation of sake.abc.GuildCache .","title":"GuildCache"},{"location":"reference/redis/#sake.redis.GuildChannelCache","text":"Bases: _Reference , sake_abc . RefGuildChannelCache Redis implementation of sake.abc.RefGuildChannelCache .","title":"GuildChannelCache"},{"location":"reference/redis/#sake.redis.InviteCache","text":"Bases: ResourceClient , sake_abc . InviteCache Redis implementation of sake.abc.InviteCache .","title":"InviteCache"},{"location":"reference/redis/#sake.redis.InviteCache.with_invite_expire","text":"with_invite_expire ( expire ) Set the default expire time for invite entries added with this client. PARAMETER DESCRIPTION expire The default expire time to add for invites in this cache or None to set back to the default behaviour. This may either be the number of seconds as an int or float (where millisecond precision is supported) or a timedelta. TYPE: typing . Optional [ _internal . ExpireT ] RETURNS DESCRIPTION Self The client this is being called on to enable chained calls.","title":"with_invite_expire()"},{"location":"reference/redis/#sake.redis.MemberCache","text":"Bases: ResourceClient , sake_abc . MemberCache Redis implementation of sake.abc.MemberCache .","title":"MemberCache"},{"location":"reference/redis/#sake.redis.MessageCache","text":"Bases: ResourceClient , sake_abc . MessageCache Redis implementation of sake.abc.MessageCache .","title":"MessageCache"},{"location":"reference/redis/#sake.redis.MessageCache.with_message_expire","text":"with_message_expire ( expire ) Set the default expire time for message entries added with this client. PARAMETER DESCRIPTION expire The default expire time to add for messages in this cache or None to set back to the default behaviour. This may either be the number of seconds as an int or float (where millisecond precision is supported) or a timedelta. TYPE: typing . Optional [ _internal . ExpireT ] RETURNS DESCRIPTION Self The client this is being called on to enable chained calls.","title":"with_message_expire()"},{"location":"reference/redis/#sake.redis.PresenceCache","text":"Bases: ResourceClient , sake_abc . PresenceCache Redis implementation of sake.abc.PresenceCache .","title":"PresenceCache"},{"location":"reference/redis/#sake.redis.RedisCache","text":"Bases: GuildCache , EmojiCache , GuildChannelCache , InviteCache , MemberCache , MessageCache , PresenceCache , RoleCache , UserCache , VoiceStateCache , sake_abc . Cache A Redis implementation of all the defined cache resources.","title":"RedisCache"},{"location":"reference/redis/#sake.redis.ResourceClient","text":"Bases: sake_abc . Resource , abc . ABC A base client which all resources in this implementation will implement. Note This cannot be initialised by itself and is useless alone.","title":"ResourceClient"},{"location":"reference/redis/#sake.redis.ResourceClient.__init__","text":"__init__ ( address , app , event_manager = None , * , config = None , default_expire = DEFAULT_SLOW_EXPIRE , event_managed = False , password = None , max_connections_per_db = 5 , dumps = lambda obj : json . dumps ( obj ) . encode (), loads = json . loads ) Initialise a resource client. PARAMETER DESCRIPTION app The Hikari client all the models returned by this client should be bound to. TYPE: hikari . RESTAware address The address to use to connect to the Redis backend server this resource is linked to. E.g: - \"redis://[[username]:[password]]@localhost:6379\" - \"rediss://[[username]:[password]]@localhost:6379\" - \"unix://[[username]:[password]]@/path/to/socket.sock\" Three URL schemes are supported: - redis:// : creates a TCP socket connection. See more at: https://www.iana.org/assignments/uri-schemes/prov/redis - rediss:// : creates a SSL wrapped TCP socket connection. See more at: https://www.iana.org/assignments/uri-schemes/prov/rediss - unix:// : creates a Unix Domain Socket connection. TYPE: str event_manager The event manager to bind this resource client to. If provided then this client will automatically manage resources based on received gateway events. TYPE: typing . Optional [ hikari . api . EventManager ] DEFAULT: None event_managed Whether the client should be started and stopped based on the attached event_manager's lifetime events. TYPE: bool DEFAULT: False password The password to use to connect to the backend Redis server. TYPE: typing . Optional [ str ] DEFAULT: None RAISES DESCRIPTION ValueError When event_managed is True and event_manager wasn't passed.","title":"__init__()"},{"location":"reference/redis/#sake.redis.ResourceClient.add_to_tanjun","text":"add_to_tanjun ( client , / , * , trust_get_for = None , tanjun_managed = False ) Add this Redis client to a Tanjun client. This method will register type dependencies for the resources implemented by it (including tanjun.dependencies.async_cache compatible adapters which will allow Tanjun extensions and standard utility such as converters to be aware of this cache). The type dependencies this will register depend on which resources are implemented but are as follows for each standard resource implementation: sake.redis.EmojiCache sake.abc.EmojiCache sake.abc.RefEmojiCache sake.redis.EmojiCache tanjun.dependencies.async_cache.SfCache[hikari.KnownCustomEmoji] tanjun.dependencies.async_cache.SfGuildBound[hikari.KnownCustomEmoji] sake.redis.GuildCache sake.abc.GuildCache sake.redis.GuildCache tanjun.dependencies.async_cache.SfCache[hikari.Guild] tanjun.depepdencies.async_cache.SfCache[hikari.GatewayGuild] sake.redis.GuildChannelCache sake.abc.GuildChannelCache sake.abc.RefGuildChannelCache sake.redis.GuildChannelCache tanjun.dependencies.async_cache.SfCache[hikari.PermissibleGuildChannel] tanjun.dependencies.async_cache.SfGuildBound[hikari.PermissibleGuildChannel] sake.redis.InviteCache sake.abc.InviteCache sake.redis.InviteCache tanjun.dependencies.async_cache.SfCache[hikari.Invite] tanjun.dependencies.async_cache.SfCache[hikari.InviteWithMetadata] sake.redis.MemberCache sake.abc.MemberCache sake.redis.MemberCache tanjun.dependencies.async_cache.SfGuildBound[hikari.Member] sake.redis.MessageCache sake.abc.MessageCache sake.redis.MessageCache tanjun.dependencies.async_cache.SfCache[hikari.Message] sake.redis.PresenceCache sake.abc.PresenceCache sake.redis.PresenceCache tanjun.dependencies.async_cache.SfGuildBound[hikari.MemberPresence] sake.redis.RoleCache sake.abc.RoleCache sake.redis.RoleCache tanjun.dependencies.async_cache.SfCache[hikari.Role] tanjun.dependencies.async_cache.SfGuildBound[hikari.Role] sake.redis.UserCache sake.abc.MeCache sake.abc.UserCache sake.redis.UserCache tanjun.dependencies.async_cache.SingleStoreCache[hikari.OwnUser] tanjun.dependencies.async_cache.SfCache[hikari.User] sake.redis.VoiceStateCache sake.abc.VoiceStateCache sake.redis.VoiceStateCache tanjun.dependencies.async_cache.SfGuildBound[hikari.VoiceState] sake.redis.RedisCache All of the previously listed types sake.abc.Cache sake.redis.RedisCache PARAMETER DESCRIPTION client The Tanjun client to add this client to. TYPE: tanjun . abc . Client trust_get_for A collection of resource types which the tanjun.dependencies.async_cache adapter \"get\" methods should raise tanjun.dependencies.async_cache.EntryNotFound if the entry isn't found rather than just tanjun.dependencies.async_cache.CacheMissError . If not passed then this will default to the following resources: sake.abc.EmojiCache sake.abc.GuildCache sake.abc.GuildChannelCache sake.abc.MemberCache sake.abc.PresenceCache sake.abc.RoleCache sake.abc.VoiceStateCache sake.abc.UserCache (if sake.abc.MemberCache is also implemented). TYPE: typing . Optional [ collections . Collection [ type [ sake_abc . Resource ]]] DEFAULT: None tanjun_managed Whether the client should be started and stopped based on the tanjun client's lifecycle. This is useful if the client isn't being event managed. TYPE: bool DEFAULT: False RAISES DESCRIPTION RuntimeError If this is called in an environment without Tanjun.","title":"add_to_tanjun()"},{"location":"reference/redis/#sake.redis.ResourceClient.all_indexes","text":"all_indexes () Get a set of all the Redis client indexes this is using. Note This accounts for index overrides. RETURNS DESCRIPTION collections . abc . MutableSet [ ResourceIndex | int ] A set of all the Redis client indexes this is using.","title":"all_indexes()"},{"location":"reference/redis/#sake.redis.ResourceClient.all_intents","text":"all_intents () The intents required for a client to be sufficient event managed. If not all these intents are present in the linked event manager then this client won't be able to reliably fill and manage the linked redis database(s).","title":"all_intents()"},{"location":"reference/redis/#sake.redis.ResourceClient.app","text":"app () The Hikari client this resource client is tied to. This is used to build models with a app attribute.","title":"app()"},{"location":"reference/redis/#sake.redis.ResourceClient.config","text":"config () This client's settings.","title":"config()"},{"location":"reference/redis/#sake.redis.ResourceClient.default_expire","text":"default_expire () The default expire time used for fields with no actual lifetime. If this is None then these cases will have no set expire after.","title":"default_expire()"},{"location":"reference/redis/#sake.redis.ResourceClient.dump","text":"dump ( data ) Serialize a dict object representation into the form to be stored. PARAMETER DESCRIPTION data The dict object to serialize. TYPE: _ObjectT RETURNS DESCRIPTION bytes The object serialized as bytes.","title":"dump()"},{"location":"reference/redis/#sake.redis.ResourceClient.event_manager","text":"event_manager () The event manager this resource client is using for managing state.","title":"event_manager()"},{"location":"reference/redis/#sake.redis.ResourceClient.get_index_override","text":"get_index_override ( index ) Get the override set for an index. PARAMETER DESCRIPTION index The index to get the override for. TYPE: ResourceIndex RETURNS DESCRIPTION int | None The found override if set, else None .","title":"get_index_override()"},{"location":"reference/redis/#sake.redis.ResourceClient.index","text":"index () The index for the resource which this class is linked to. Note This should be called on specific base classes and will not be accurate after inheritance. Warning This doesn't account for overrides. RETURNS DESCRIPTION collections . abc . Sequence [ ResourceIndex ] The index of the resource this class is linked to.","title":"index()"},{"location":"reference/redis/#sake.redis.ResourceClient.intents","text":"intents () The intents the resource requires to function properly. Note This should be called on specific base classes and will not be accurate after inheritance. RETURNS DESCRIPTION hikari . intents . Intents The intents the resource requires to function properly.","title":"intents()"},{"location":"reference/redis/#sake.redis.ResourceClient.load","text":"load ( data ) Deserialize a bytes representation to a dict object. PARAMETER DESCRIPTION data The bytes representation from the database to a dict object. TYPE: bytes RETURNS DESCRIPTION dict [ str , typing . Any ] The deserialized dict object.","title":"load()"},{"location":"reference/redis/#sake.redis.ResourceClient.with_index_override","text":"with_index_override ( index , / , * , override = None ) Add an index override. PARAMETER DESCRIPTION index The index to override. TYPE: ResourceIndex override The override to set. If this is left at None then any previous override is unset. This will decide which Redis database is targeted for a resource. TYPE: typing . Optional [ int ] DEFAULT: None","title":"with_index_override()"},{"location":"reference/redis/#sake.redis.ResourceIndex","text":"Bases: enum . IntEnum An enum of the indexes used to map cache resources to their redis databases.","title":"ResourceIndex"},{"location":"reference/redis/#sake.redis.RoleCache","text":"Bases: _Reference , sake_abc . RoleCache Redis implementation of sake.abc.RoleCache .","title":"RoleCache"},{"location":"reference/redis/#sake.redis.UserCache","text":"Bases: _MeCache , sake_abc . UserCache Redis implementation of sake.abc.UserCache .","title":"UserCache"},{"location":"reference/redis/#sake.redis.UserCache.with_user_expire","text":"with_user_expire ( expire ) Set the default expire time for user entries added with this client. PARAMETER DESCRIPTION expire The default expire time to add for users in this cache or None to set back to the default behaviour. This may either be the number of seconds as an int or float (where millisecond precision is supported) or a timedelta. TYPE: typing . Optional [ _internal . ExpireT ] RETURNS DESCRIPTION Self The client this is being called on to enable chained calls.","title":"with_user_expire()"},{"location":"reference/redis/#sake.redis.VoiceStateCache","text":"Bases: _Reference , sake_abc . VoiceStateCache Redis implementation of sake.abc.VoiceStateCache .","title":"VoiceStateCache"}]}